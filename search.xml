<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Git基础</title>
    <url>/2020/11/05/My-New-Post/</url>
    <content><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p><strong>版本控制软件</strong>是一个用来记录文件变化，以便将来查阅特定</p>
<p>版本修订情况的系统，因此有时也叫做“<strong>版本控制系统</strong>”</p>
<a id="more"></a>

<h1 id="通俗的理解"><a href="#通俗的理解" class="headerlink" title="通俗的理解"></a>通俗的理解</h1><p>把<strong>手工管理</strong>文件版本的方式，改为由<strong>软件管理</strong>文件的版本；</p>
<p>这个<strong>负责管理文件版本的软件</strong>，叫做“版本控制软件”</p>
<h1 id="使用版本控制软件的好处"><a href="#使用版本控制软件的好处" class="headerlink" title="使用版本控制软件的好处"></a>使用版本控制软件的好处</h1><ul>
<li><strong>操作简便：</strong>只需<strong>识记几组简单的终端命令</strong>，即可快速上手常见的版本控制软件</li>
<li><strong>易于对比：</strong>基于版本控制软件提供的功能，能够方便地比较文件的变化细节，从而查找出导致问题的原因</li>
<li><strong>易于回溯：</strong>可以将选定的文件回溯到之前的状态，甚至将整个项目都回退到过去某个时间点的状态</li>
<li><strong>不易丢失：</strong>在版本控制软件中，被用户误删除的文件，可以轻松的恢复回来</li>
<li><strong>协作方便：</strong>基于版本控制软件提供的分支功能，可以轻松实现多人协作开发时的代码合并操作</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Vue基础</title>
    <url>/2020/11/08/Vue%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="day01"><a href="#day01" class="headerlink" title="day01"></a>day01</h1><h2 id="vue-基本语法"><a href="#vue-基本语法" class="headerlink" title="vue 基本语法"></a>vue 基本语法</h2><h3 id="vue-概述"><a href="#vue-概述" class="headerlink" title="vue 概述"></a>vue 概述</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">渐进式JavaScript框架</span><br><span class="line">声明式渲染=&gt;组件系统=&gt;客户端路由=&gt;集中式状态管理=&gt;项目构建</span><br><span class="line"></span><br><span class="line">https:<span class="comment">//cn.vuejs.org</span></span><br><span class="line"></span><br><span class="line">易用:熟悉html,css,js,可以快速上手</span><br><span class="line">灵活:可以在一个库和完整框架之间伸缩自如</span><br><span class="line">高效:<span class="number">20</span>KB运行大小,超快虚拟DOM</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="vue-基本使用"><a href="#vue-基本使用" class="headerlink" title="vue 基本使用"></a>vue 基本使用</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>使用步骤</span><br><span class="line">引入库文件,vue.js</span><br><span class="line">创建一个容器,app</span><br><span class="line">使用vue</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>参数分析</span><br><span class="line">el:元素挂载位置(值是css选择器或DOM元素)</span><br><span class="line">data:模型数据(值是一个对象)</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>插值表达式</span><br><span class="line">将数据填充到html中</span><br><span class="line">可以简单计算</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>vue代码运行原理(编译过程)</span><br><span class="line">vue代码=&gt;vue框架=&gt;原生js语法</span><br></pre></td></tr></table></figure>

<h2 id="vue-模板语法"><a href="#vue-模板语法" class="headerlink" title="vue 模板语法"></a>vue 模板语法</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>前端渲染</span><br><span class="line">模板+数据=静态html页面</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>发展</span><br><span class="line">原生js拼接字符串,插入到HTML中</span><br><span class="line">前端模板引擎</span><br><span class="line">vue模版语法</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>vue模版语法</span><br><span class="line">插值表达式</span><br><span class="line">指令</span><br><span class="line">事件绑定</span><br><span class="line">属性绑定</span><br><span class="line">样式绑定</span><br><span class="line">根治循环结构</span><br></pre></td></tr></table></figure>

<h2 id="vue-指令"><a href="#vue-指令" class="headerlink" title="vue 指令"></a>vue 指令</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>.什么是指令</span><br><span class="line"><span class="comment">//本质是自定义属性,以v-开头</span></span><br><span class="line"></span><br><span class="line"><span class="number">2</span>.解决闪动问题的指令</span><br><span class="line">v-cloak,解决插值表达式存在的<span class="string">'闪动'</span>问题</span><br><span class="line"><span class="comment">//本质是给自定义属性设置样式,先隐藏元素,替换完成后再显示</span></span><br><span class="line"><span class="comment">//给最外层盒子使用v-cloak</span></span><br><span class="line">[v-cloak]&#123;</span><br><span class="line">	display:none</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>.数据绑定的指令</span><br><span class="line">v-text=<span class="string">"str"</span>,填充纯文本</span><br><span class="line"><span class="comment">//同插值表达式类似,无闪动问题</span></span><br><span class="line">v-html=<span class="string">"str"</span>,填充HTML片段</span><br><span class="line"><span class="comment">//存在安全隐患,容易导致XSS攻击,本网站内部数据可以使用,第三方数据不可以用</span></span><br><span class="line">v-pre,填充原始信息</span><br><span class="line"><span class="comment">//本质是跳过vue编译过程</span></span><br><span class="line"></span><br><span class="line"><span class="number">4</span>.数据响应式的指令</span><br><span class="line"><span class="number">4.1</span> 响应式</span><br><span class="line">html响应式:屏幕尺寸变化导致样式变化</span><br><span class="line">数据响应式:数据变化导致页面内容的变化</span><br><span class="line"><span class="number">4.2</span> 数据绑定</span><br><span class="line">将数据填充到标签中</span><br><span class="line"><span class="number">4.3</span> 不再具有响应式</span><br><span class="line">v-once,只编译一次</span><br><span class="line"><span class="comment">//显示内容之后不再具有响应式,只绑定一次,如果显示的信息后续不需要再修改,可以使用v-once,可以提高性能</span></span><br><span class="line"></span><br><span class="line"><span class="number">5</span>.双向数据绑定的指令</span><br><span class="line">v-model,绑定某一个数据</span><br><span class="line"><span class="comment">//一般用于input框和textarea中</span></span><br><span class="line"></span><br><span class="line"><span class="number">6</span>.案例--数据绑定指令</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;div v-text="msg"&gt;&lt;/div&gt;&lt;!--&lt;h1&gt;你好&lt;/h1&gt;--&gt;</span><br><span class="line">    &lt;div v-html="msg"&gt;&lt;/div&gt;&lt;!--你好(加黑加粗)--&gt;</span><br><span class="line">    &lt;div v-pre&gt;&#123;&#123;msg&#125;&#125;&lt;/div&gt;&lt;!--&#123;&#123;msg&#125;&#125;--&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script src="../js/vue.js"&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">      msg: <span class="string">'&lt;h1&gt;你好&lt;/h1&gt;'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="MVVM-设计思想"><a href="#MVVM-设计思想" class="headerlink" title="MVVM 设计思想"></a>MVVM 设计思想</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">M(model),模型(Data)</span><br><span class="line">V(view),视图(DOM)</span><br><span class="line">VM(ViewModel),控制器(Vue)</span><br><span class="line">&#x2F;&#x2F;模型到视图:Data Bindings,数据绑定</span><br><span class="line">&#x2F;&#x2F;视图到模型:DOM Listeners,事件监听</span><br></pre></td></tr></table></figure>

<h2 id="vue-事件绑定"><a href="#vue-事件绑定" class="headerlink" title="vue 事件绑定"></a>vue 事件绑定</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">v-on:click=<span class="string">"handle1"</span></span><br><span class="line"><span class="comment">//简写:@click="handle1"</span></span><br><span class="line"><span class="comment">//如果不传递参数,默认传递事件对象作为参数</span></span><br><span class="line">v-on:click=<span class="string">"handle2(实参1,实参2,$event)"</span></span><br><span class="line"><span class="comment">//如果传递参数,默认最后一个参数为事件对象(一般约定)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> vm=<span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el:<span class="string">"#app"</span>,</span><br><span class="line">	data:&#123;<span class="comment">//所有数据写在data中</span></span><br><span class="line">		num:<span class="number">0</span></span><br><span class="line">	&#125;,</span><br><span class="line">	methods:&#123;<span class="comment">//所有方法写在methods中</span></span><br><span class="line">		handle1:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">         <span class="comment">//可以简写成handle(形参1,形参2,e)&#123;&#125;,不能写箭头函数</span></span><br><span class="line">			<span class="keyword">this</span>.num++ <span class="comment">//this===vm</span></span><br><span class="line">		&#125;,</span><br><span class="line">        handle2:<span class="function"><span class="keyword">function</span>(<span class="params">形参<span class="number">1</span>,形参<span class="number">2</span>,e</span>)</span>&#123;</span><br><span class="line">			<span class="keyword">this</span>.num++</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">1.常用修饰符 1.1 事件修饰符 @click.stop="handle"//阻止冒泡 @click.prevent="handle"//阻止默认行为 1.2 按键修饰符 @keyup.enter="submitH"//按enter键 @keyup.delete="clearH"//按delete键 1.3</span><br><span class="line">自定义按键修饰符 @keyup.65="handle"//按下ascii值为65的键 或者 @keyup.aa="handle"//可以自定义修饰符名字 Vue.config.keyCodes.aa=65//直观,语义化,方便记忆 2.阻止冒泡和默认行为案例</span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-text</span>=<span class="string">"num"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> @<span class="attr">click</span>=<span class="string">"handle"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> @<span class="attr">click.stop.prevent</span>=<span class="string">"handle"</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">'#app'</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line">      num: 0,</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line"><span class="actionscript">      handle: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.num++;</span></span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">3.按键修饰符</span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"userinfo.uname"</span> @<span class="attr">keyup.enter</span>=<span class="string">"submit"</span> @<span class="attr">keyup.delete</span>=<span class="string">"clear"</span> /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"userinfo.pwd"</span> @<span class="attr">keyup.enter</span>=<span class="string">"submit"</span> @<span class="attr">keyup.delete</span>=<span class="string">"clear"</span> /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> @<span class="attr">click.prevent</span>=<span class="string">"submit"</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> @<span class="attr">click.prevent</span>=<span class="string">"clear"</span>&gt;</span>清空<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">'#app'</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line">      userinfo: &#123;</span><br><span class="line"><span class="actionscript">        uname: <span class="string">'张三'</span>,</span></span><br><span class="line"><span class="actionscript">        pwd: <span class="string">'123456'</span>,</span></span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      submit() &#123;</span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.userinfo.uname, <span class="keyword">this</span>.userinfo.pwd);</span></span><br><span class="line">      &#125;,</span><br><span class="line">      clear() &#123;</span><br><span class="line"><span class="actionscript">        (<span class="keyword">this</span>.userinfo.uname = <span class="string">''</span>), (<span class="keyword">this</span>.userinfo.pwd = <span class="string">''</span>);</span></span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>案例–简单计算器</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;div&gt;数值1: &lt;input type="text" v-model.number="a"&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div&gt;数值2: &lt;input type="text" v-model.number="b"&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div&gt;计算结果: &#123;&#123;result&#125;&#125;&lt;/div&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;button type="button" @click="computer"&gt;计算&lt;/button&gt;</span><br><span class="line">      &lt;button type="button" @click="clear"&gt;清空&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script src="../js/vue.js"&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">      a: <span class="string">''</span>,</span><br><span class="line">      b: <span class="string">''</span>,</span><br><span class="line">      result: <span class="string">''</span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      computer() &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.a !== <span class="string">''</span> &amp;&amp; <span class="keyword">this</span>.b !== <span class="string">''</span>)</span><br><span class="line">          <span class="keyword">this</span>.result = <span class="keyword">this</span>.a + <span class="keyword">this</span>.b</span><br><span class="line">      &#125;,</span><br><span class="line">      clear() &#123;</span><br><span class="line">        <span class="keyword">this</span>.a = <span class="string">''</span>,</span><br><span class="line">          <span class="keyword">this</span>.b = <span class="string">''</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="vue-属性绑定"><a href="#vue-属性绑定" class="headerlink" title="vue 属性绑定"></a>vue 属性绑定</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>v-bind指令</span><br><span class="line">v-bind:attr=<span class="string">"val"</span><span class="comment">//简写 :attr="val"</span></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>v-model底层原理</span><br><span class="line"><span class="comment">//msg的数据渲染到input框中</span></span><br><span class="line"><span class="comment">//监听input框的input事件</span></span><br><span class="line"><span class="comment">//发生改变将input的value值赋给msg</span></span><br><span class="line"><span class="comment">//msg的数据渲染到页面</span></span><br><span class="line"></span><br><span class="line">&lt;input type=<span class="string">"text"</span> v-bind:value=<span class="string">"msg"</span> v-on:input=<span class="string">"handle"</span>&gt;</span><br><span class="line"><span class="comment">//&lt;input type="text" :value="msg" @input="handle"&gt;</span></span><br><span class="line">method:&#123;</span><br><span class="line">    handle(event)&#123;</span><br><span class="line">    	<span class="keyword">this</span>.msg=event.target.value</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>案例--v-model</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;div&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">:value</span>=<span class="string">"msg"</span> @<span class="attr">input</span>=<span class="string">"handle"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &lt;div&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">:value</span>=<span class="string">"msg"</span> @<span class="attr">input</span>=<span class="string">"handle"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">&lt;script src="../</span>js/vue.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;script&gt;</span></span><br><span class="line"><span class="string">  var vm = new Vue(&#123;</span></span><br><span class="line">    el: "#app",</span><br><span class="line">    data: &#123;</span><br><span class="line">      msg: <span class="string">''</span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      handle(e) &#123;</span><br><span class="line">        <span class="keyword">this</span>.msg = e.target.value</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="vue-样式绑定"><a href="#vue-样式绑定" class="headerlink" title="vue 样式绑定"></a>vue 样式绑定</h2><h3 id="class-样式"><a href="#class-样式" class="headerlink" title="class 样式"></a>class 样式</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>对象形式</span><br><span class="line">v-bind:<span class="class"><span class="keyword">class</span></span>=<span class="string">"&#123;active:isActive, error:isError&#125;"</span></span><br><span class="line"><span class="comment">//data中操作isActive或objClasses,值为布尔值,控制是否应用样式</span></span><br><span class="line"><span class="comment">//objClasses:&#123;active:true, error:false&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>数组形式</span><br><span class="line">v-bind:<span class="class"><span class="keyword">class</span></span>=<span class="string">"[activeClass, errorClass]"</span></span><br><span class="line"><span class="comment">//data中操作activeClass或arrClasses,值为一个具体的类名</span></span><br><span class="line"><span class="comment">//arrClasses:[active, error]</span></span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>结合使用</span><br><span class="line">v-bind:<span class="class"><span class="keyword">class</span></span>=<span class="string">"[activeClass, errorClass, &#123;test:isTest&#125;]"</span></span><br><span class="line"><span class="comment">//默认的class写在class中,会保留</span></span><br><span class="line"><span class="comment">//class绑定的值可以简化写,在data中操作类名或者arrClasses</span></span><br><span class="line"><span class="comment">//arrClasses:[active, error, &#123;test:true&#125;]</span></span><br></pre></td></tr></table></figure>

<h3 id="style-样式"><a href="#style-样式" class="headerlink" title="style 样式"></a>style 样式</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>对象形式</span><br><span class="line">v-bind:style=<span class="string">"&#123;color:activeColor, fontsize:fontSize&#125;"</span></span><br><span class="line"><span class="comment">//会将重复的样式覆盖,没有重复的新增</span></span><br><span class="line"><span class="comment">//objStyle=&#123;activeColor:&#123;...&#125;, fontSize:&#123;...&#125;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>数组形式</span><br><span class="line">v-bind:style=<span class="string">"&#123;color:activeColor, fontsize:fontSize&#125;"</span></span><br><span class="line"><span class="comment">//Vue对数组的直接赋值是监听不到的,</span></span><br><span class="line"><span class="comment">//只能通过this.$set(改变的数组,索引,要改变的值)赋值才能监听到</span></span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>混合形式</span><br></pre></td></tr></table></figure>

<h2 id="分支循环结构"><a href="#分支循环结构" class="headerlink" title="分支循环结构"></a>分支循环结构</h2><h3 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>分支结构(条件渲染)</span><br><span class="line">v-<span class="keyword">if</span></span><br><span class="line">v-<span class="keyword">else</span></span><br><span class="line">v-<span class="keyword">else</span>-<span class="keyword">if</span></span><br><span class="line">v-show</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>v-<span class="keyword">if</span>和v-show的区别</span><br><span class="line">v-<span class="keyword">if</span>控制是否渲染,v-show控制是否显示(已渲染)</span><br></pre></td></tr></table></figure>

<h3 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>遍历数组</span><br><span class="line">v-<span class="keyword">for</span>=<span class="string">"item in list"</span></span><br><span class="line">v-<span class="keyword">for</span>=<span class="string">"(item,index) in list"</span></span><br><span class="line"><span class="comment">//遍历数组为1-2个值</span></span><br><span class="line"><span class="comment">//一定要加上:key="index"或:key="id",帮助vue区分不同的元素,从而提高性能</span></span><br><span class="line"><span class="comment">//&lt;li :key="index" v-for='(item,index) in list'&gt;&#123;&#123;item&#125;&#125;&lt;/li&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>遍历对象</span><br><span class="line">v-<span class="keyword">for</span>=<span class="string">"(value,key,index) in obj"</span></span><br><span class="line"><span class="comment">//遍历对象为3个值</span></span><br></pre></td></tr></table></figure>

<p>案例–tab 栏切换</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"tab"</span>&gt;</span><br><span class="line">            &lt;ul&gt;</span><br><span class="line">                &lt;li <span class="meta">@click</span>=<span class="string">"handle(item.id)"</span> :<span class="class"><span class="keyword">class</span></span>=<span class="string">"currentIndex==index?'active':''"</span> :key=<span class="string">"item.id"</span></span><br><span class="line">                    v-<span class="keyword">for</span>=<span class="string">"(item,index) in list"</span>&gt;&#123;&#123;item.title&#125;&#125;</span><br><span class="line">                &lt;/li&gt;</span><br><span class="line"><span class="comment">//:class="currentIndex==index?'active':''",三元表达式方式</span></span><br><span class="line"><span class="comment">//:class="&#123;'active':currentIndex==index&#125;",class样式方式</span></span><br><span class="line">            &lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">            &lt;div :<span class="class"><span class="keyword">class</span></span>=<span class="string">"currentIndex==index?'current':''"</span> :key=<span class="string">"item.id"</span> v-<span class="keyword">for</span>=<span class="string">"(item,index) in list"</span>&gt;</span><br><span class="line">                &lt;img :src=<span class="string">"item.path"</span> alt=<span class="string">""</span>&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script type="text/javascript" src="./vue.js"&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">            el: <span class="string">'#app'</span>,</span><br><span class="line">            data: &#123;</span><br><span class="line">                currentIndex: <span class="number">0</span>, <span class="comment">// 选项卡当前的索引</span></span><br><span class="line">                list: [&#123;</span><br><span class="line">                    id: <span class="number">1</span>,</span><br><span class="line">                    title: <span class="string">'apple'</span>,</span><br><span class="line">                    path: <span class="string">'img/apple.png'</span></span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                    id: <span class="number">2</span>,</span><br><span class="line">                    title: <span class="string">'orange'</span>,</span><br><span class="line">                    path: <span class="string">'img/orange.png'</span></span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                    id: <span class="number">3</span>,</span><br><span class="line">                    title: <span class="string">'lemon'</span>,</span><br><span class="line">                    path: <span class="string">'img/lemon.png'</span></span><br><span class="line">                &#125;]</span><br><span class="line">            &#125;,</span><br><span class="line">            methods: &#123;</span><br><span class="line">                handle(id) &#123;</span><br><span class="line">                    <span class="keyword">this</span>.currentIndex = id - <span class="number">1</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>

<h1 id="day2"><a href="#day2" class="headerlink" title="day2"></a>day2</h1><h2 id="Vue-常用特性"><a href="#Vue-常用特性" class="headerlink" title="Vue 常用特性"></a>Vue 常用特性</h2><h3 id="表单操作"><a href="#表单操作" class="headerlink" title="表单操作"></a>表单操作</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>文本域</span><br><span class="line">&lt;input type=<span class="string">"text"</span> v-model=<span class="string">"uname"</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>单选框</span><br><span class="line">&lt;input type=<span class="string">"radio"</span> name=<span class="string">"gender"</span> v-model=<span class="string">"gender"</span> value=<span class="string">"1"</span>&gt;</span><br><span class="line">&lt;input type=<span class="string">"radio"</span> name=<span class="string">"gender"</span> v-model=<span class="string">"gender"</span> value=<span class="string">"2"</span>&gt;</span><br><span class="line">&lt;!--name控制为一组单选框--&gt;</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>多选框</span><br><span class="line">&lt;input type=<span class="string">"checkbox"</span> v-model=<span class="string">"hobby"</span> value=<span class="string">"1"</span>&gt;篮球</span><br><span class="line">&lt;input type=<span class="string">"checkbox"</span> v-model=<span class="string">"hobby"</span> value=<span class="string">"2"</span>&gt;唱歌</span><br><span class="line">&lt;input type=<span class="string">"checkbox"</span> v-model=<span class="string">"hobby"</span> value=<span class="string">"3"</span>&gt;跳舞</span><br><span class="line">&lt;!--hobby值为一个数组--&gt;</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>下拉选择框</span><br><span class="line">&lt;select multiple v-model=<span class="string">"job"</span>&gt;</span><br><span class="line">        &lt;option value=<span class="string">"0"</span>&gt;--请选择职业--&lt;<span class="regexp">/option&gt;</span></span><br><span class="line"><span class="regexp">        &lt;option value="1"&gt;教师&lt;/</span>option&gt;</span><br><span class="line">        &lt;option value=<span class="string">"2"</span>&gt;医生&lt;<span class="regexp">/option&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>select&gt;</span><br><span class="line">&lt;!--multiple 表示可多选--&gt;</span><br><span class="line">&lt;!--单选时job值为一个数,多选时job值为一个数组--&gt;</span><br><span class="line"></span><br><span class="line"><span class="number">5.</span>文本域</span><br><span class="line">&lt;textarea cols=<span class="string">"30"</span> rows=<span class="string">"3"</span> v-model=<span class="string">"desc"</span>&gt;&lt;<span class="regexp">/textarea&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">6.</span></span><br><span class="line"><span class="regexp">var vm = new Vue(&#123;</span></span><br><span class="line"><span class="regexp">    el: "#app",</span></span><br><span class="line"><span class="regexp">    data: &#123;</span></span><br><span class="line"><span class="regexp">      uname: '',</span></span><br><span class="line"><span class="regexp">      gender: 0,</span></span><br><span class="line"><span class="regexp">      hobby: [],</span></span><br><span class="line"><span class="regexp">      job: 0,</span></span><br><span class="line"><span class="regexp">      jobs: [0],</span></span><br><span class="line"><span class="regexp">      desc: ''</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;)</span></span><br></pre></td></tr></table></figure>

<h4 id="表单域修饰符"><a href="#表单域修饰符" class="headerlink" title="表单域修饰符"></a>表单域修饰符</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">v-model.number,转化为数值</span><br><span class="line">v-model.trim,去掉开始和结尾的空格</span><br><span class="line">v-model.lazy,将input事件(输入就触发)切换为change事件(失去焦点且值发生变化才触发)</span><br></pre></td></tr></table></figure>

<h3 id="自定义指令-directive"><a href="#自定义指令-directive" class="headerlink" title="自定义指令: directive"></a>自定义指令: directive</h3><h4 id="自定义指令-不带参数"><a href="#自定义指令-不带参数" class="headerlink" title="自定义指令(不带参数)"></a>自定义指令(不带参数)</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>定义指令</span><br><span class="line">Vue.directive(<span class="string">'指令名'</span>, &#123;</span><br><span class="line">	钩子函数: <span class="function"><span class="keyword">function</span> (<span class="params">参数列表</span>) </span>&#123;&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>使用指令</span><br><span class="line">&lt;input type=<span class="string">"text"</span> v-指令名&gt;</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>钩子函数</span><br><span class="line">bind<span class="comment">//只调用一次,指令第一次绑定元素时</span></span><br><span class="line">inserted<span class="comment">//被绑定元素插入父节点时调用</span></span><br><span class="line">update<span class="comment">//所在组件的VNode更新时调用</span></span><br><span class="line">componentUpdated<span class="comment">//所在组件VNode及其子VNode全部更新后调用</span></span><br><span class="line">unbind<span class="comment">//只调用一次,指令与元素解绑时调用</span></span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>钩子函数参数</span><br><span class="line">el<span class="comment">//指令绑定的元素,可直接用来操作DOM</span></span><br><span class="line">binding<span class="comment">//一个对象,包含以下属性</span></span><br><span class="line"><span class="comment">//name:指令名,不含v-</span></span><br><span class="line"><span class="comment">//value:指令的绑定值</span></span><br><span class="line"><span class="comment">//oldValue:绑定的前一个值</span></span><br><span class="line"><span class="comment">//expression:字符串形式的指令表达式</span></span><br><span class="line"><span class="comment">//arg:传给指令的参数</span></span><br><span class="line"><span class="comment">//modifiers:一个包含修饰符的对象</span></span><br><span class="line">vnode<span class="comment">//Vue编译生成的虚拟节点</span></span><br><span class="line">oldVnode<span class="comment">//上一个虚拟节点,仅在update和componentUpdated钩子中可用</span></span><br></pre></td></tr></table></figure>

<h4 id="自定义指令-带参数"><a href="#自定义指令-带参数" class="headerlink" title="自定义指令(带参数)"></a>自定义指令(带参数)</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>.使用</span><br><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"text"</span> v-color=<span class="string">"msg"</span>&gt;<span class="comment">//绑定值</span></span><br><span class="line"> &lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>.定义</span><br><span class="line">Vue.directive(<span class="string">'color'</span>, &#123;</span><br><span class="line">    bind: function (el, binding) &#123;</span><br><span class="line">      el.style.backgroundColor = binding.value.color</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">      msg: &#123;</span><br><span class="line">        color: <span class="string">"blue"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      handle: function () &#123;</span><br><span class="line">		<span class="comment">//</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="局部指令-directives"><a href="#局部指令-directives" class="headerlink" title="局部指令: directives"></a>局部指令: directives</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>使用</span><br><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"text"</span> v-color=<span class="string">"msg"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"text"</span> v-focus&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">2.定义</span></span><br><span class="line"><span class="regexp">var vm = new Vue(&#123;</span></span><br><span class="line"><span class="regexp">    el: "#app",</span></span><br><span class="line"><span class="regexp">    data: &#123;</span></span><br><span class="line"><span class="regexp">      msg: &#123;</span></span><br><span class="line"><span class="regexp">        color: "blue"</span></span><br><span class="line"><span class="regexp">      &#125;</span></span><br><span class="line"><span class="regexp">    &#125;,</span></span><br><span class="line"><span class="regexp">    methods: &#123;</span></span><br><span class="line"><span class="regexp">      handle: function () &#123;</span></span><br><span class="line"><span class="regexp">		/</span><span class="regexp">/</span></span><br><span class="line"><span class="regexp">      &#125;</span></span><br><span class="line"><span class="regexp">    &#125;,</span></span><br><span class="line"><span class="regexp">    directives:&#123;/</span><span class="regexp">/定义局部指令,可以定义多个指令</span></span><br><span class="line"><span class="regexp">   	 color:&#123;</span></span><br><span class="line"><span class="regexp">        bind: function (el, binding) &#123;</span></span><br><span class="line"><span class="regexp">     		 el.style.backgroundColor = binding.value.color</span></span><br><span class="line"><span class="regexp">    	&#125;</span></span><br><span class="line"><span class="regexp">   	 &#125;,</span></span><br><span class="line"><span class="regexp">   	 focus:&#123;</span></span><br><span class="line"><span class="regexp">   	 	inserted:function(el)&#123;</span></span><br><span class="line"><span class="regexp">   	 		el.focus()</span></span><br><span class="line"><span class="regexp">   	 	&#125;</span></span><br><span class="line"><span class="regexp">   	 &#125;</span></span><br><span class="line"><span class="regexp">   &#125;</span></span><br><span class="line"><span class="regexp">&#125;)</span></span><br></pre></td></tr></table></figure>

<h3 id="计算属性-computed"><a href="#计算属性-computed" class="headerlink" title="计算属性: computed"></a>计算属性: computed</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>将模板的计算逻辑抽离出来,让模板的内容更加简洁</span><br><span class="line"><span class="keyword">var</span> vm=<span class="keyword">new</span> Vue(&#123;</span><br><span class="line">	el:<span class="string">"#app"</span>,</span><br><span class="line">	data:&#123;</span><br><span class="line">		msg:<span class="string">'hello'</span><span class="comment">//计算属性是基于data中的数据进行计算</span></span><br><span class="line">	&#125;,</span><br><span class="line">	methods:&#123;</span><br><span class="line">		reversedString()&#123;<span class="comment">// reversedString() 调用</span></span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">this</span>.msg.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>)<span class="comment">//必须要return</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;,</span><br><span class="line">	computed:&#123;</span><br><span class="line">		reversedMessage()&#123;<span class="comment">// reversedMessage 调用</span></span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">this</span>.msg.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>)<span class="comment">//必须要return</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>计算属性和方法的区别*******</span><br><span class="line">计算属性有缓存,方法没有,一般情况下使用缓存</span><br><span class="line">当data的数据或者计算的方法发生变化,重新计算</span><br><span class="line"><span class="comment">//会通过侦听器侦听变化</span></span><br><span class="line"><span class="comment">//会解决v-if和v-for同级使用的问题</span></span><br></pre></td></tr></table></figure>

<h3 id="侦听器-watch"><a href="#侦听器-watch" class="headerlink" title="侦听器: watch"></a>侦听器: watch</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>.应用场景:</span><br><span class="line">数据变化时&lt;执行异步&gt;或者&lt;开销比较大&gt;的操作</span><br><span class="line">数据一旦发生变化,就通知侦听器所绑定的方法(观察器)</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>.使用步骤</span><br><span class="line">处理数据</span><br><span class="line">v-model绑定数据</span><br><span class="line">使用watch监听数据变化</span><br><span class="line">注册一个函数去处理数据变化的结果</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>.代码</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;span&gt;&lt;input type="text" v-model="uname"&gt;&lt;/span&gt;</span><br><span class="line">    &lt;span&gt;&#123;&#123;tip&#125;&#125;&lt;/span&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script src="../js/vue.js"&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">  <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">      uname: <span class="string">''</span>,</span><br><span class="line">      tip: <span class="string">''</span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      checkName(uname) &#123;</span><br><span class="line">        <span class="keyword">var</span> that = <span class="keyword">this</span><span class="comment">//如果使用箭头函数则不需要</span></span><br><span class="line">        setTimeout(function () &#123;</span><br><span class="line">          <span class="keyword">if</span> (uname === <span class="string">"admin"</span>)</span><br><span class="line">            that.tip = <span class="string">"用户名已被占用,请重新输入!"</span></span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">            that.tip = <span class="string">"用户名未被占用,可放心使用!"</span></span><br><span class="line">        &#125;, <span class="number">2000</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    watch: &#123;<span class="comment">//和计算属性的区别:不需要返回值</span></span><br><span class="line">      uname(val) &#123;<span class="comment">//这里的uname就是要监听的数据名称,不是自定义</span></span><br><span class="line">        <span class="keyword">this</span>.checkName(val)<span class="comment">//val就是所在input变化后的value值</span></span><br><span class="line">        <span class="keyword">this</span>.tip = <span class="string">"正在验证..."</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="过滤器-filter"><a href="#过滤器-filter" class="headerlink" title="过滤器: filter"></a>过滤器: filter</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">用于格式化数据</span><br><span class="line"><span class="number">1</span>.自定义过滤器</span><br><span class="line">Vue.filter(<span class="string">'过滤器名'</span>,function(val)&#123;...&#125;)<span class="comment">//全局过滤器,写在script中,</span></span><br><span class="line">filters:&#123;过滤器名: function(val)&#123;...&#125;&#125;<span class="comment">//局部过滤器,写在Vue实例中,在本组件可使用</span></span><br><span class="line"><span class="comment">//结果用return返回</span></span><br><span class="line"></span><br><span class="line"><span class="number">2</span>.过滤器的使用</span><br><span class="line">&#123;&#123;数据 | 过滤器&#125;&#125;<span class="comment">//插值表达式中使用</span></span><br><span class="line">v-bind:自定义属性=<span class="string">"数据 | 过滤器"</span><span class="comment">//指令绑定中使用</span></span><br><span class="line"><span class="comment">//支持链式编程</span></span><br><span class="line"></span><br><span class="line"><span class="number">3</span>.带参数的过滤器</span><br><span class="line">Vue.filter(<span class="string">'过滤器名'</span>,function(value,参数<span class="number">1</span>)&#123;...&#125;)</span><br><span class="line">&#123;&#123;数据 | 过滤器(参数<span class="number">1</span>)&#125;&#125;<span class="comment">//插值表达式</span></span><br><span class="line">v-bind:自定义属性=<span class="string">"数据 | 过滤器(参数1)"</span><span class="comment">//指令绑定</span></span><br><span class="line"></span><br><span class="line"><span class="number">4</span>.案例--首字母大写和时间格式化</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"text"</span> v-model=<span class="string">"msg"</span>&gt;</span><br><span class="line">    &lt;div&gt;&#123;&#123;msg | upper&#125;&#125;&lt;/div&gt;</span><br><span class="line">    &lt;div&gt;&#123;&#123;date | format('yyyy-MM-dd')&#125;&#125;&lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">  <span class="comment">// 首字母大写过滤器</span></span><br><span class="line">  Vue.filter(<span class="string">'upper'</span>, function (val) &#123;</span><br><span class="line">    <span class="keyword">return</span> val.charAt(<span class="number">0</span>).toUpperCase() + val.slice(<span class="number">1</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// 时间格式化</span></span><br><span class="line">  Vue.filter(<span class="string">'format'</span>, function (val, arg) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arg === <span class="string">'yyyy-MM-dd'</span>)</span><br><span class="line">      <span class="keyword">return</span> `$&#123;val.getFullYear()&#125;-$&#123;val.getMonth() + <span class="number">1</span>&#125;-$&#123;val.getDate()&#125;`</span><br><span class="line">    <span class="keyword">return</span> times.getDate() + <span class="string">'日'</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">      msg: <span class="string">''</span>,</span><br><span class="line">      date: <span class="keyword">new</span> Date()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.主要阶段</span><br><span class="line">挂载(初始化相关属性):beforeCreate,created,beforeMount,mounted</span><br><span class="line">更新(元素或组件的变更操作):beforeUpdate,updated</span><br><span class="line">销毁(销毁相关属性):beforeDestroy,destroyed</span><br><span class="line">beforeCreate,created,beforeMount,mounted,beforeUpdate,updated,beforeDestroy,destroyed</span><br><span class="line">怀孕前&#x3D;&gt;怀孕&#x3D;&gt;出生前&#x3D;&gt;出生&#x3D;&gt;事件前&#x3D;&gt;事件&#x3D;&gt;死亡前&#x3D;&gt;死亡</span><br></pre></td></tr></table></figure>

<p><img src="assets/1602157091857.png" alt="1602157091857"></p>
<h3 id="综合案例"><a href="#综合案例" class="headerlink" title="综合案例"></a>综合案例</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>.数组相关API</span><br><span class="line">变异方法:push,unshift,pop,shift<span class="comment">//改变原数组</span></span><br><span class="line">替换方法:concat,sort,reverse<span class="comment">//不改变原数组,返回新数组,需要接收</span></span><br><span class="line"></span><br><span class="line"><span class="number">2</span>.数组(对象)响应式变化</span><br><span class="line">Vue.set(vm.数组名,数组索引/对象属性名,目标值)</span><br><span class="line">vm.$set(vm.数组名,数组索引/对象属性名,目标值)</span><br><span class="line"><span class="comment">//使用set就是调用vue内部的方法对新增的属性数据进行劫持和监听</span></span><br><span class="line"><span class="comment">//使用索引直接修改数组元素不具有响应式,数组名[索引号]=值</span></span><br><span class="line"><span class="comment">//使用属性名直接修改属性值不具有响应式,对象名.属性名=值</span></span><br><span class="line"></span><br><span class="line"><span class="number">3</span>.常用特性应用场景</span><br><span class="line">过滤器:格式化日期</span><br><span class="line">自定义指令:获取表单焦点</span><br><span class="line">计算属性:统计图书数量</span><br><span class="line">侦听器:验证图书是否存在</span><br><span class="line">生命周期:图书数据处理</span><br></pre></td></tr></table></figure>

<h1 id="day3-组件化开发"><a href="#day3-组件化开发" class="headerlink" title="day3 组件化开发"></a>day3 组件化开发</h1><p>组件化开发思想</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">组件化规范: Web Components</span><br><span class="line">&#x2F;&#x2F;通过创建封装好功能的定制元素解决上述问题</span><br><span class="line">&#x2F;&#x2F;官网:https:&#x2F;&#x2F;developer.mozilla.org&#x2F;zh-CN&#x2F;Web&#x2F;Web_Components</span><br></pre></td></tr></table></figure>

<h2 id="组件注册-component"><a href="#组件注册-component" class="headerlink" title="组件注册: component"></a>组件注册: component</h2><h3 id="全局组件注册"><a href="#全局组件注册" class="headerlink" title="全局组件注册"></a>全局组件注册</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>.使用组件</span><br><span class="line">&lt;组件名&gt;&lt;/组件名&gt;</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>.注册组件</span><br><span class="line">Vue.component(<span class="string">'组件名'</span>,&#123;</span><br><span class="line">	data:function()&#123;<span class="comment">//也可以写成data()&#123;...&#125;,必须是一个函数,不能写成对象</span></span><br><span class="line">	<span class="comment">//使用函数会形成一个闭包的环境,保证组件不会被其他组件影响</span></span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="comment">//返回值是一个对象</span></span><br><span class="line">        	数据:值<span class="comment">//这里同data中一样</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">	template:组件模块内容,<span class="comment">//组件模版的内容必须是单个的根元素(被包裹的),也可以是模板字符串</span></span><br><span class="line">     methods:&#123;</span><br><span class="line">     	方法 ()&#123;...&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>.注意事项</span><br><span class="line">使用时:</span><br><span class="line"><span class="comment">//有包裹值&lt;组件名&gt;&lt;/组件名&gt;,无包裹值&lt;组件名/&gt;</span></span><br><span class="line">注册时:</span><br><span class="line"><span class="comment">//第一个参数是组件名,第二个参数是组件对象(有生命周期,同vue一样)</span></span><br><span class="line">data:</span><br><span class="line"><span class="comment">//也可以写成data()&#123;...&#125;,必须是一个函数,不能写成对象</span></span><br><span class="line"><span class="comment">//使用函数会形成一个闭包的环境,保证组件不会被其他组件影响</span></span><br><span class="line"><span class="comment">//return的返回值是一个对象,数据同data中一样</span></span><br><span class="line">template:</span><br><span class="line"><span class="comment">//组件模版的内容必须是单个的根元素(被包裹的),也可以是模板字符串</span></span><br><span class="line">组件命名方式:</span><br><span class="line"><span class="comment">//短横线,在html文件中使用,实际开发中使用,因为html不区分大小写</span></span><br><span class="line"><span class="comment">//驼峰式,只能在模版字符串或.vue文件中使用,在普通的标签或者标签模版中,必须转成短横线形式</span></span><br><span class="line"></span><br><span class="line"><span class="number">4</span>.eg</span><br><span class="line">&lt;btn-count&gt;&lt;/btn-count&gt;</span><br><span class="line">Vue.component(<span class="string">'btn-count'</span>,&#123;</span><br><span class="line">	data:function()&#123;</span><br><span class="line">		<span class="keyword">return</span>&#123;</span><br><span class="line">			count:<span class="number">0</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;,</span><br><span class="line">	template:<span class="string">'&lt;button @click="count++"&gt;点击了&#123;&#123;count&#125;&#125;次&lt;/button&gt;'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="局部组件注册-components"><a href="#局部组件注册-components" class="headerlink" title="局部组件注册: components"></a>局部组件注册: components</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//局部组件只能在注册它的父组件中使用,一级属性</span></span><br><span class="line"><span class="comment">//使用步骤:1.引入 =&gt; 2.注册 =&gt; 3.使用</span></span><br><span class="line"><span class="keyword">var</span> 组件对象<span class="number">1</span>=&#123;data:function()&#123;<span class="keyword">return</span> ...&#125;, template:<span class="string">'...'</span>&#125;</span><br><span class="line">components: &#123;</span><br><span class="line">	组件名<span class="number">1</span>: 组件对象<span class="number">1</span>,<span class="comment">//组件名和组件对象名相同,可直接写 组件名</span></span><br><span class="line">	组件名<span class="number">2</span>: 组件对象<span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="组件间的数据交互"><a href="#组件间的数据交互" class="headerlink" title="组件间的数据交互"></a>组件间的数据交互</h2><h3 id="父组件向子组件传值"><a href="#父组件向子组件传值" class="headerlink" title="父组件向子组件传值"></a>父组件向子组件传值</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>.在子组件上创建一个属性,用于接收父组件传来的值</span><br><span class="line">&lt;menu-item title="这是父组件传来的值"&gt;&lt;/menu-item&gt;//自定义一个属性名用来接收父组件传过来的值,是死值</span><br><span class="line">&lt;menu-item :title="value"&gt;&lt;/menu-item&gt;//前面加v-bind,可以接收一个动态的值,注意data中也要有变量</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>.组件内部通过props接收传递过来的值</span><br><span class="line">Vue.component(<span class="string">'menu-item'</span>,&#123;</span><br><span class="line">	props:[<span class="string">'title'</span>]<span class="comment">//这里的props数组用来接收对应标签传过来的值</span></span><br><span class="line">	template:<span class="string">'&lt;div&gt;&#123;&#123;title&#125;&#125;&lt;/div&gt;'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="父子组件的关系"><a href="#父子组件的关系" class="headerlink" title="父子组件的关系"></a>父子组件的关系</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>.辨别父子组件</span><br><span class="line"><span class="comment">//组件标签中:包含关系就是父子关系</span></span><br><span class="line"><span class="comment">//组件配置中:一个组件A的template模版中使用了某组件B,那么组件B就是A的子组件</span></span><br><span class="line"></span><br><span class="line"><span class="number">2</span>.子组件接收父组件的值</span><br><span class="line"><span class="comment">//子组件标签中:使用自定义属性(如key)接收父组件的值(如value)</span></span><br><span class="line"><span class="comment">//子组件配置中:使用props数组接收msg</span></span><br></pre></td></tr></table></figure>

<h4 id="父子组件传值案例"><a href="#父子组件传值案例" class="headerlink" title="父子组件传值案例"></a>父子组件传值案例</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;div&gt;---我是app---&lt;/div&gt;</span><br><span class="line">    &lt;!-- 使用自定义属性动态接收父组件的值 --&gt;</span><br><span class="line">    &lt;son :str=<span class="string">"str"</span> :num=<span class="string">"num"</span> :bool=<span class="string">"bool"</span> :arr=<span class="string">"arr"</span> :obj=<span class="string">"obj"</span> /&gt;</span><br><span class="line">    &lt;son /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type="text/javascript" src="../js/vue.js"&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">  <span class="comment">// 组件对象son</span></span><br><span class="line">  <span class="keyword">var</span> son = &#123;</span><br><span class="line">    <span class="comment">// 使用props数据接收父组件的值</span></span><br><span class="line">    props: [<span class="string">"str"</span>, <span class="string">"num"</span>, <span class="string">"bool"</span>, <span class="string">"arr"</span>, <span class="string">"obj"</span>],</span><br><span class="line">    data: function () &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 组件模版</span></span><br><span class="line">    template: `</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;div&gt;---我是son---&lt;/div&gt;</span><br><span class="line">      &lt;div&gt;&#123;&#123;str&#125;&#125;&lt;/div&gt;</span><br><span class="line">      &lt;div&gt;&#123;&#123;num+num&#125;&#125;&lt;/div&gt;</span><br><span class="line">      &lt;div&gt;&#123;&#123;typeof bool&#125;&#125;&lt;/div&gt;</span><br><span class="line">      &lt;ul&gt;</span><br><span class="line">        &lt;li v-for="(item,index) in arr"&gt;&#123;&#123;item+"---"+index&#125;&#125;&lt;/li&gt;</span><br><span class="line">      &lt;/ul&gt;</span><br><span class="line">            &lt;ul&gt;</span><br><span class="line">        &lt;li v-for="(item,index) in obj"&gt;&#123;&#123;item+"---"+index&#125;&#125;&lt;/li&gt;</span><br><span class="line">      &lt;/ul&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    `,</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 实例化vue作为父组件</span></span><br><span class="line">  <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line">    <span class="comment">// 父组件传递5种不同类型的值</span></span><br><span class="line">    data: &#123;</span><br><span class="line">      str: <span class="string">"我是app的字符串"</span>,</span><br><span class="line">      num: <span class="number">12</span>,</span><br><span class="line">      bool: <span class="keyword">false</span>,</span><br><span class="line">      arr: [<span class="number">123</span>, <span class="string">'456'</span>, <span class="number">789</span>, <span class="string">'abc'</span>],</span><br><span class="line">      obj: &#123;</span><br><span class="line">        name: <span class="string">'张三'</span>,</span><br><span class="line">        age: <span class="number">22</span>,</span><br><span class="line">        gender: <span class="string">"男"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 注册组件son作为子组件</span></span><br><span class="line">    components: &#123;</span><br><span class="line">      son</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="子组件向父组件传值"><a href="#子组件向父组件传值" class="headerlink" title="子组件向父组件传值"></a>子组件向父组件传值</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">props传递数据原则:单向数据流,不能直接向父组件传递 1.通过自定义事件向父组件传递信息(子组件)</span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"$emit('自定义事件名',参数)"</span>&gt;</span>扩大字体<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--@click=$emit('自定义事件名',要传递的参数),子组件son的模版--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--=$emit('自定义事件名',要传递的参数)写在methods中,前面要加this--&gt;</span></span><br><span class="line"></span><br><span class="line">2.父组件监听子组件的事件(父组件中)</span><br><span class="line"><span class="tag">&lt;<span class="name">son</span> @<span class="attr">enlarge-text</span>=<span class="string">"handle($event)"</span>&gt;</span><span class="tag">&lt;/<span class="name">son</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--@自定义事件名="handle($event)",子组件son在父组件中的标签--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--handle是父组件methods的方法,可以操作父组件--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--$event就是子组件默认传递过来的参数,可以不用加,也会传过来--&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="非父子组件之间传值"><a href="#非父子组件之间传值" class="headerlink" title="非父子组件之间传值"></a>非父子组件之间传值</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>.单独的事件中心管理组件间的通信</span><br><span class="line"><span class="keyword">var</span> evnetHub=<span class="keyword">new</span> Vue()</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>.监听事件和销毁事件</span><br><span class="line">evnetHub.$on(<span class="string">'自定义事件'</span>,执行函数)<span class="comment">//写在B的mounted中</span></span><br><span class="line">evnetHub.$off(<span class="string">'自定义事件'</span>)<span class="comment">//写在父组件中</span></span><br><span class="line"></span><br><span class="line"><span class="number">3</span>.触发事件</span><br><span class="line">evnetHub.$emit(<span class="string">'自定义事件'</span>,参数)<span class="comment">//写在A的methods中</span></span><br><span class="line"></span><br><span class="line"><span class="number">4</span>.简单理解***</span><br><span class="line"><span class="comment">//定义事件中心</span></span><br><span class="line"><span class="keyword">var</span> hub=<span class="keyword">new</span> Vue()</span><br><span class="line"></span><br><span class="line"><span class="comment">//在A中template中: 绑定事件和执行函数 handleA</span></span><br><span class="line"><span class="meta">@click</span>=<span class="string">"handleA"</span></span><br><span class="line"><span class="comment">//在A的methods中: 触发自定义事件 A-event</span></span><br><span class="line">handleA()&#123;hub.$emit(<span class="string">'A-event'</span>,<span class="number">10</span>)&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在B的mounted中: 监听自定义事件 A-event 并执行函数</span></span><br><span class="line">hub.$on(<span class="string">'A-event'</span>,(val)=&#123;...&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="案例–非父子组件传值"><a href="#案例–非父子组件传值" class="headerlink" title="案例–非父子组件传值"></a>案例–非父子组件传值</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义事件中心</span></span><br><span class="line"><span class="keyword">var</span> hub = <span class="keyword">new</span> Vue();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 组件对象one</span></span><br><span class="line"><span class="keyword">var</span> one = &#123;</span><br><span class="line">  data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      oneValue: <span class="number">2</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="comment">//2.执行handle1,触发two的自定义事件two-event</span></span><br><span class="line">    handle1() &#123;</span><br><span class="line">      hub.$emit(<span class="string">'two-event'</span>, <span class="number">3</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//1.点击one的按钮,触发handle1</span></span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div&gt;</span></span><br><span class="line"><span class="string">      &lt;div&gt;one的值: &#123;&#123;oneValue&#125;&#125;&lt;/div&gt;</span></span><br><span class="line"><span class="string">      &lt;button @click="handle1"&gt;one的按钮&lt;/button&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">    `</span>,</span><br><span class="line">  mounted: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//3.执行one-event事件的处理函数</span></span><br><span class="line">    hub.$on(<span class="string">'one-event'</span>, (val) =&gt; &#123;</span><br><span class="line">      <span class="keyword">this</span>.oneValue += val;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 组件对象two</span></span><br><span class="line"><span class="keyword">var</span> two = &#123;</span><br><span class="line">  data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      twoValue: <span class="number">3</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="comment">//执行handle2,触发one的自定义事件one-event</span></span><br><span class="line">    handle2() &#123;</span><br><span class="line">      hub.$emit(<span class="string">'one-event'</span>, <span class="number">2</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//点击two的按钮,执行handle2</span></span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div&gt;</span></span><br><span class="line"><span class="string">      &lt;div&gt;two的值: &#123;&#123;twoValue&#125;&#125;&lt;/div&gt;</span></span><br><span class="line"><span class="string">      &lt;button @click="handle2"&gt;two的按钮&lt;/button&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">    `</span>,</span><br><span class="line">  mounted: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//3.执行two-event事件的处理函数</span></span><br><span class="line">    hub.$on(<span class="string">'two-event'</span>, (val) =&gt; &#123;</span><br><span class="line">      <span class="keyword">this</span>.twoValue += val;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例化vue作为父组件</span></span><br><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  data: &#123;&#125;,</span><br><span class="line">  <span class="comment">// 注册组件one,two作为子组件</span></span><br><span class="line">  components: &#123;</span><br><span class="line">    one,</span><br><span class="line">    two,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="组件插槽"><a href="#组件插槽" class="headerlink" title="组件插槽"></a>组件插槽</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>.组件插槽的基本用法</span><br><span class="line">常用于父组件向子组件传递内容</span><br><span class="line"><span class="number">1.1</span> 使用插槽</span><br><span class="line">&lt;p&gt;这是标签包裹的内容&lt;/p&gt;</span><br><span class="line"><span class="comment">//标签包裹的内容会显示在&lt;slot&gt;&lt;/slot&gt;所在的位置</span></span><br><span class="line"><span class="number">1.1</span> 定义插槽</span><br><span class="line">&lt;slot&gt;这是插槽默认的内容&lt;/slot&gt;</span><br><span class="line"><span class="comment">//如果标签没有包裹内容,会显示&lt;slot&gt;&lt;/slot&gt;包裹的内容</span></span><br><span class="line"></span><br><span class="line"><span class="number">2</span>.具名插槽用法</span><br><span class="line">&lt;p slot="插槽名"&gt;这是标签包裹的内容&lt;/p&gt;//组件中的标签使用插槽</span><br><span class="line">&lt;slot name="插槽名"&gt;&lt;/slot&gt;//定义插槽</span><br><span class="line"><span class="comment">//根据名称进行匹配,没有匹配到的都放在默认插槽中</span></span><br><span class="line"><span class="comment">//没有使用&lt;/template&gt;,会将标签也插入进来</span></span><br><span class="line"><span class="comment">//使用&lt;/template&gt;,只会插入被&lt;/template&gt;包裹的内容</span></span><br><span class="line"><span class="comment">//填充多个标签,使用&lt;template slot="插槽名"&gt;多个标签&lt;/template&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="number">3</span>.作用域插槽</span><br><span class="line">应用场景:在父组件中可以获取子组件的数据,对子组件的内容进行加工处理</span><br><span class="line"><span class="number">3.1</span> 子组件的template模版的slot插槽中:</span><br><span class="line"><span class="comment">//创建一个作用域并通过动态属性绑定数据:info="item"</span></span><br><span class="line">    &lt;li :key=<span class="string">"item.id"</span> v-<span class="keyword">for</span>=<span class="string">"(item,index) in list"</span>&gt;</span><br><span class="line">      &lt;slot :info='item'&gt;&#123;&#123;item.name&#125;&#125;&lt;/slot&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line"></span><br><span class="line"><span class="number">3.2</span> 父组件的&lt;template slot-scope=<span class="string">'slotProps'</span>&gt;标签中:</span><br><span class="line"><span class="comment">//使用slotProps.info.name可以使用子组件的绑定的值</span></span><br><span class="line">      &lt;template slot-scope=<span class="string">'slotProps'</span>&gt;</span><br><span class="line">        &lt;strong v-<span class="keyword">if</span>=<span class="string">"slotProps.info.id==3"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">'current'</span>&gt;</span><br><span class="line">          &#123;&#123;slotProps.info.name&#125;&#125;</span><br><span class="line">        &lt;/strong&gt;</span><br><span class="line">        &lt;span v-<span class="keyword">else</span>&gt;</span><br><span class="line">          &#123;&#123;slotProps.info.name&#125;&#125;</span><br><span class="line">        &lt;/span&gt;</span><br><span class="line">      &lt;/template&gt;</span><br></pre></td></tr></table></figure>

<h4 id="案例-具名插槽"><a href="#案例-具名插槽" class="headerlink" title="案例:具名插槽"></a>案例:具名插槽</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;chacao&gt;</span><br><span class="line">      &lt;p&gt;222&lt;/p&gt;</span><br><span class="line">      &lt;p slot="footer"&gt;444&lt;/p&gt;</span><br><span class="line">      &lt;p&gt;333&lt;/p&gt;</span><br><span class="line">      &lt;p slot="header"&gt;111&lt;/p&gt;</span><br><span class="line">    &lt;/chacao&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script type="text/javascript" src="../js/vue.js"&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">  Vue.component(<span class="string">'chacao'</span>, &#123;</span><br><span class="line">    template: `</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;header&gt;</span><br><span class="line">          &lt;slot name="header"&gt;&lt;/slot&gt;</span><br><span class="line">        &lt;/header&gt;</span><br><span class="line">        &lt;main&gt;</span><br><span class="line">           &lt;slot&gt;&lt;/slot&gt;</span><br><span class="line">        &lt;/main&gt;</span><br><span class="line">        &lt;footer&gt;</span><br><span class="line">           &lt;slot name="footer"&gt;&lt;/slot&gt;</span><br><span class="line">        &lt;/footer&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">   `</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">"#app"</span></span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h4 id="案例-作用域插槽"><a href="#案例-作用域插槽" class="headerlink" title="案例:作用域插槽"></a>案例:作用域插槽</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;fruits :list=<span class="string">"list"</span>&gt;</span><br><span class="line">      &lt;template slot-scope=<span class="string">'slotProps'</span>&gt;</span><br><span class="line">        &lt;strong v-<span class="keyword">if</span>=<span class="string">"slotProps.info.id==3"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">'current'</span>&gt;</span><br><span class="line">          &#123;&#123;slotProps.info.name&#125;&#125;</span><br><span class="line">        &lt;/strong&gt;</span><br><span class="line">        &lt;span v-<span class="keyword">else</span>&gt;</span><br><span class="line">          &#123;&#123;slotProps.info.name&#125;&#125;</span><br><span class="line">        &lt;/span&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">    &lt;/fruits&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script type="text/javascript" src="../js/vue.js"&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">  Vue.component(<span class="string">'fruits'</span>, &#123;</span><br><span class="line">    props: [<span class="string">'list'</span>],</span><br><span class="line">    data: function () &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    template: `</span><br><span class="line">  &lt;ul&gt;水果列表</span><br><span class="line">    &lt;li :key=<span class="string">"item.id"</span> v-<span class="keyword">for</span>=<span class="string">"(item,index) in list"</span>&gt;</span><br><span class="line">      &lt;slot :info='item'&gt;&#123;&#123;item.name&#125;&#125;&lt;/slot&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">   `</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">      list: [&#123;</span><br><span class="line">        id: <span class="number">1</span>,</span><br><span class="line">        name: <span class="string">'apple'</span></span><br><span class="line">      &#125;, &#123;</span><br><span class="line">        id: <span class="number">2</span>,</span><br><span class="line">        name: <span class="string">'orange'</span></span><br><span class="line">      &#125;, &#123;</span><br><span class="line">        id: <span class="number">3</span>,</span><br><span class="line">        name: <span class="string">'banana'</span></span><br><span class="line">      &#125;]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="案例-购物车"><a href="#案例-购物车" class="headerlink" title="案例:购物车"></a>案例:购物车</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"container"</span>&gt;</span><br><span class="line">      &lt;my-cart&gt;&lt;/my-cart&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type="text/javascript" src="../js/vue.js"&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">  <span class="keyword">var</span> CartTitle = &#123;</span><br><span class="line">    props: [<span class="string">"uname"</span>],</span><br><span class="line">    template: `</span><br><span class="line">        &lt;div class="title"&gt;&#123;&#123;uname&#125;&#125; 的购物车&lt;/div&gt;</span><br><span class="line">      `,</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> CartList = &#123;</span><br><span class="line">    props: [<span class="string">"list"</span>],</span><br><span class="line">    template: `</span><br><span class="line">         &lt;div&gt;</span><br><span class="line">          &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"item"</span> v-<span class="keyword">for</span>=<span class="string">"(item,index) in list"</span>&gt;</span><br><span class="line">            &lt;img :src=<span class="string">"item.img"</span>/&gt;</span><br><span class="line">            &lt;div class="name"&gt;&#123;&#123;item.name&#125;&#125;&lt;/div&gt;</span><br><span class="line">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"change"</span>&gt;</span><br><span class="line">              &lt;a href="javascript:;" @click="item.num==0?item.num:item.num--"&gt;－&lt;/a&gt;</span><br><span class="line">              &lt;input type=<span class="string">"text"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"num"</span> :value=<span class="string">"item.num"</span> <span class="meta">@input</span>=<span class="string">"item.num=$event.target.value"</span>/&gt;</span><br><span class="line">              &lt;a href="javascript:;"  @click="item.num++"&gt;＋&lt;/a&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class="del" @click="$emit('del-cart', index)"&gt;×&lt;/div&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">         &lt;/div&gt;</span><br><span class="line">      `</span><br><span class="line">    <span class="comment">// item.num=$event.target.value</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> CartTotal = &#123;</span><br><span class="line">    props: [<span class="string">'list'</span>],</span><br><span class="line">    template: `</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"total"</span>&gt;</span><br><span class="line">          &lt;span&gt;总价：&#123;&#123;total&#125;&#125;&lt;/span&gt;</span><br><span class="line">          &lt;button&gt;结算&lt;/button&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      `,</span><br><span class="line">    computed: &#123;</span><br><span class="line">      total() &#123;</span><br><span class="line">        <span class="keyword">var</span> t = <span class="number">0</span></span><br><span class="line">        <span class="keyword">this</span>.list.forEach(item =&gt; &#123;</span><br><span class="line">          t += item.num * item.price</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span> t</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  Vue.component(<span class="string">'my-cart'</span>, &#123;</span><br><span class="line">    data: function () &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        uname: <span class="string">'彭俊'</span>,</span><br><span class="line">        list: [</span><br><span class="line">          &#123;</span><br><span class="line">            id: <span class="number">1</span>,</span><br><span class="line">            name: <span class="string">'TCL彩电'</span>,</span><br><span class="line">            price: <span class="number">1000</span>,</span><br><span class="line">            num: <span class="number">1</span>,</span><br><span class="line">            img: <span class="string">'img/a.jpg'</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            id: <span class="number">2</span>,</span><br><span class="line">            name: <span class="string">'机顶盒'</span>,</span><br><span class="line">            price: <span class="number">1000</span>,</span><br><span class="line">            num: <span class="number">1</span>,</span><br><span class="line">            img: <span class="string">'img/b.jpg'</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            id: <span class="number">3</span>,</span><br><span class="line">            name: <span class="string">'海尔冰箱'</span>,</span><br><span class="line">            price: <span class="number">1000</span>,</span><br><span class="line">            num: <span class="number">1</span>,</span><br><span class="line">            img: <span class="string">'img/c.jpg'</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            id: <span class="number">4</span>,</span><br><span class="line">            name: <span class="string">'小米手机'</span>,</span><br><span class="line">            price: <span class="number">1000</span>,</span><br><span class="line">            num: <span class="number">1</span>,</span><br><span class="line">            img: <span class="string">'img/d.jpg'</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            id: <span class="number">5</span>,</span><br><span class="line">            name: <span class="string">'PPTV电视'</span>,</span><br><span class="line">            price: <span class="number">1000</span>,</span><br><span class="line">            num: <span class="number">2</span>,</span><br><span class="line">            img: <span class="string">'img/e.jpg'</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    template: `</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">'cart'</span>&gt;</span><br><span class="line">          &lt;cart-title :uname="uname"&gt;&lt;/cart-title&gt;</span><br><span class="line">          &lt;cart-list :list="list" @del-cart="delCart($event)" @change-num="changeNum($event)" &gt;&lt;/cart-list&gt;</span><br><span class="line">          &lt;cart-total :list="list"&gt;&lt;/cart-total&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      `,</span><br><span class="line">    components: &#123;</span><br><span class="line">      <span class="string">'cart-title'</span>: CartTitle,</span><br><span class="line">      <span class="string">'cart-list'</span>: CartList,</span><br><span class="line">      <span class="string">'cart-total'</span>: CartTotal,</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      delCart(id) &#123;</span><br><span class="line">        <span class="keyword">this</span>.list.splice(id, <span class="number">1</span>)</span><br><span class="line">      &#125;,</span><br><span class="line">      changeNum(obj) &#123;</span><br><span class="line">        <span class="keyword">this</span>.list[obj.index].num = Number(obj.value)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    data: &#123;&#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//tip:删除数组元素:arr.splice(index,1)</span></span><br></pre></td></tr></table></figure>

<h1 id="day04-前后端交互"><a href="#day04-前后端交互" class="headerlink" title="day04 前后端交互"></a>day04 前后端交互</h1><h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>接口调用方式</span><br><span class="line">原生的ajax</span><br><span class="line">jquery的ajax</span><br><span class="line">promise</span><br><span class="line">fetch</span><br><span class="line">axios</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>url地址格式</span><br><span class="line"><span class="number">2.1</span> 传统的url地址</span><br><span class="line">schema:<span class="comment">//host:port/path?query#fragment</span></span><br><span class="line"><span class="number">2.2</span> Restful形式的url地址</span><br><span class="line">schema:<span class="comment">//host:port/path/query#fragment</span></span><br><span class="line"><span class="comment">//增删改查:post,delete,put,get</span></span><br></pre></td></tr></table></figure>

<h3 id="Promise-简介"><a href="#Promise-简介" class="headerlink" title="Promise 简介"></a>Promise 简介</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>异步调用</span><br><span class="line">定时任务,Ajax,事件执行函数</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>多次异步调用的依赖分析</span><br><span class="line">多次异步调用的顺序不固定,异步调用结果如果存在依赖,则需要嵌套(回调地狱)</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span><span class="built_in">Promise</span></span><br><span class="line">异步编程的一种解决方案,本质是一个对象(函数)</span><br><span class="line">好处:避免回调地狱,提供了简洁的API,控制异步操作更加容易</span><br></pre></td></tr></table></figure>

<h3 id="Promise-基本用法"><a href="#Promise-基本用法" class="headerlink" title="Promise 基本用法"></a>Promise 基本用法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>实例化<span class="built_in">Promise</span>对象,构造函数中传递函数,在函数中用于处理异步任务</span><br><span class="line"><span class="keyword">var</span> p=<span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">	<span class="comment">//成功时调用resolve,失败时调用reject</span></span><br><span class="line">	setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">var</span> flag=<span class="literal">true</span></span><br><span class="line">		<span class="keyword">if</span>(flag)&#123;</span><br><span class="line">			resolve(<span class="string">'hello'</span>)</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			reject(<span class="string">'出错了'</span>)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;,<span class="number">100</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>使用<span class="built_in">Promise</span>的实例对象p,成功调用第一个,失败调用第二个</span><br><span class="line">p.then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;, err =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//p.then(function(data)&#123;...&#125;,function(err)&#123;...&#125;)</span></span><br></pre></td></tr></table></figure>

<h3 id="Promise-处理-Ajax-请求"><a href="#Promise-处理-Ajax-请求" class="headerlink" title="Promise 处理 Ajax 请求"></a>Promise 处理 Ajax 请求</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span><span class="built_in">Promise</span>封装处理原生Ajax请求</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">queryData</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">    xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (xhr.readyState != <span class="number">4</span>) <span class="keyword">return</span></span><br><span class="line">      <span class="keyword">if</span> (xhr.status == <span class="number">200</span>) resolve(xhr.responseText)</span><br><span class="line">      <span class="keyword">else</span> reject(<span class="string">"出错了"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    xhr.open(<span class="string">'get'</span>, url)</span><br><span class="line">    xhr.send(<span class="literal">null</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>发送一次ajax请求</span><br><span class="line">queryData(<span class="string">"http://localhost:3000/data"</span>)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">  &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">info</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(info);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>发送多次ajax请求</span><br><span class="line"><span class="number">3.1</span> 回调地狱</span><br><span class="line"><span class="comment">//当数据的请求相互依赖,且有顺序要求,在请求中嵌套其他请求</span></span><br><span class="line">queryData(<span class="string">"http://localhost:3000/data"</span>)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">    queryData(<span class="string">"http://localhost:3000/data1"</span>)</span><br><span class="line">      .then(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(data);</span><br><span class="line">        queryData(<span class="string">"http://localhost:3000/data2"</span>)</span><br><span class="line">          .then(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(data);</span><br><span class="line">          &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="number">3.2</span> 链式调用</span><br><span class="line">queryData(<span class="string">"http://localhost:3000/data"</span>)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">    <span class="keyword">return</span> queryData(<span class="string">"http://localhost:3000/data1"</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">    <span class="keyword">return</span> queryData(<span class="string">"http://localhost:3000/data2"</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>then参数中的函数返回值</span><br><span class="line"><span class="comment">//then是一个函数,返回值可以是实例对象或者普通值</span></span><br><span class="line"><span class="comment">//返回实例对象,则调用下一个then</span></span><br><span class="line"><span class="comment">//返回普通值,则作为下一个then的参数,返回一个默认的Promise实例对象调用下一个then</span></span><br></pre></td></tr></table></figure>

<h3 id="Promise-常用-API"><a href="#Promise-常用-API" class="headerlink" title="Promise 常用 API"></a>Promise 常用 API</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>实例方法</span><br><span class="line">p.then()<span class="comment">//得到异步任务的正确结果</span></span><br><span class="line">p.catch()<span class="comment">//得到异常信息</span></span><br><span class="line">p.finally()<span class="comment">//成功与否都会执行(尚且不是正式标准)</span></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>对象方法</span><br><span class="line"><span class="built_in">Promise</span>.all([p1, p2, p3]).then()</span><br><span class="line"><span class="comment">//并发处理多个异步任务,所有任务执行完成得到结果</span></span><br><span class="line"><span class="comment">//返回一个数组,顺序就是数组的排列顺序</span></span><br><span class="line"><span class="built_in">Promise</span>.race([p1, p2, p3]).then()</span><br><span class="line"><span class="comment">//并发处理多个异步任务,有一个任务执行完成得到结果</span></span><br><span class="line"><span class="comment">//最快的返回结果</span></span><br><span class="line"></span><br><span class="line">eg.实例方法案例</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">		setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">			reject(<span class="string">'err'</span>)</span><br><span class="line">		&#125;,<span class="number">100</span>)</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo()</span><br><span class="line">	.then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(data)</span><br><span class="line">	&#125;)</span><br><span class="line">	.catch(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(data)</span><br><span class="line">	&#125;)</span><br><span class="line">	.finally(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">'finished'</span>)</span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line">eg.对象方法案例</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Promis</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">      $.ajax(&#123;</span><br><span class="line">        url: url,</span><br><span class="line">        success: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">          resolve(res)</span><br><span class="line">        &#125;,</span><br><span class="line">        error: <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">          reject(err)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> p1 = <span class="built_in">Promise</span>(<span class="string">'http://localhost:3000/a1'</span>)</span><br><span class="line">  <span class="keyword">const</span> p2 = <span class="built_in">Promise</span>(<span class="string">'http://localhost:3000/a2'</span>)</span><br><span class="line">  <span class="keyword">const</span> p3 = <span class="built_in">Promise</span>(<span class="string">'http://localhost:3000/a3'</span>)</span><br><span class="line"></span><br><span class="line">  <span class="built_in">Promise</span>.all([p1, p2, p3]).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res);<span class="comment">//返回顺序就是数组的排列顺序</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="built_in">Promise</span>.race([p2, p3, p1]).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res);<span class="comment">//最快的返回结果</span></span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>

<h2 id="fetch"><a href="#fetch" class="headerlink" title="fetch"></a>fetch</h2><h3 id="fetch-语法"><a href="#fetch-语法" class="headerlink" title="fetch 语法"></a>fetch 语法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fetch(&#39;url&#39;,&#123;method:&#39;GET&#x2F;DELETE&#39;&#125;)</span><br><span class="line">fetch(&#39;url&#39;,&#123;</span><br><span class="line">    method:&#39;POST&#x2F;PUT&#39;,</span><br><span class="line">    body:&#39;name&#x3D;lisi&amp;pwd&#x3D;123456&#39;,</span><br><span class="line">    &#x2F;&#x2F;body:JSON.stringify(&#123;&quot;name&quot;:&quot;lisi&quot;,&quot;pwd&quot;:123456&#125;),json格式数据</span><br><span class="line">    headers:&#123;</span><br><span class="line">        &#39;Content-Type&#39;:&#39;application&#x2F;x-www-form-urlencoded&#39;</span><br><span class="line">        &#x2F;&#x2F;&#39;Content-Type&#39;:&#39;application&#x2F;josn&#39;</span><br><span class="line">    &#125;&#125;)</span><br><span class="line">&#x2F;&#x2F;更加简单的数据获取方式,xhr的升级版,基于promise</span><br></pre></td></tr></table></figure>

<h3 id="fetch-请求参数"><a href="#fetch-请求参数" class="headerlink" title="fetch 请求参数"></a>fetch 请求参数</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 get&#x2F;delete:通过url传参</span><br><span class="line">restful格式:</span><br><span class="line">	http:&#x2F;&#x2F;localhost:3000&#x2F;books&#x2F;123</span><br><span class="line">传统格式:</span><br><span class="line">	http:&#x2F;&#x2F;localhost:3000&#x2F;books&#x2F;?id&#x3D;123</span><br><span class="line">2 post&#x2F;put:通过body传参</span><br><span class="line">表单(formData)格式(&#39;Content-Type&#39;:&#39;application&#x2F;x-www-form-urlencoded&#39;):</span><br><span class="line">	body:&#39;name&#x3D;lisi&amp;pwd&#x3D;123456&#39;,</span><br><span class="line">json格式(&#39;Content-Type&#39;:&#39;application&#x2F;josn&#39;):</span><br><span class="line">	body:JSON.stringify(&#123;&quot;name&quot;:&quot;lisi&quot;,&quot;pwd&quot;:123456&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="fetch-的-API"><a href="#fetch-的-API" class="headerlink" title="fetch 的 API"></a>fetch 的 API</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//then()和text()</span></span><br><span class="line">fetch(<span class="string">'http://localhost:3000/fdata'</span>)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//第一个then,return一个promise对象</span></span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">    <span class="keyword">return</span> data.text();</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//第二个then,得到想要的结果</span></span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<h3 id="fetch-的响应结果-格式"><a href="#fetch-的响应结果-格式" class="headerlink" title="fetch 的响应结果(格式)"></a>fetch 的响应结果(格式)</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">text(),结果转成字符串</span><br><span class="line">json(),结果转成json对象</span><br></pre></td></tr></table></figure>

<h2 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h2><h3 id="axios-基本特性"><a href="#axios-基本特性" class="headerlink" title="axios 基本特性"></a>axios 基本特性</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">基于Promise用于浏览器和node.js的http客户端</span><br><span class="line">支持浏览器和nodejs</span><br><span class="line">支持promise</span><br><span class="line">能拦截请求和响应</span><br><span class="line">自动转换JSON数据</span><br></pre></td></tr></table></figure>

<h3 id="axios-语法"><a href="#axios-语法" class="headerlink" title="axios 语法"></a>axios 语法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">axios.get(&#39;url&#39;[,&#123;params:&#123;...&#125;&#125;])</span><br><span class="line">	.then(function(ret)&#123;</span><br><span class="line">		console.log(ret.data)&#x2F;&#x2F;ret.data才是真实数据,data为固定属性名</span><br><span class="line">	&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="axios-常用-API"><a href="#axios-常用-API" class="headerlink" title="axios 常用 API***"></a>axios 常用 API***</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span><span class="keyword">get</span>/delete:</span><br><span class="line">axios.<span class="keyword">get</span>('url/?id=123')//传统url传参</span><br><span class="line">axios.<span class="keyword">get</span>('url/123')//restful的传参</span><br><span class="line">axios.<span class="keyword">get</span>('url',&#123;params:&#123;<span class="attr">id</span>:<span class="number">123</span>&#125;&#125;)<span class="comment">//params对象传参</span></span><br><span class="line"><span class="comment">//url传参(传统和restful),或者params对象传参</span></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>post/put</span><br><span class="line">axios.post(<span class="string">'url/123'</span>, &#123;<span class="attr">uname</span>: <span class="string">'tom'</span>,<span class="attr">pwd</span>: <span class="number">123</span>&#125;)<span class="comment">//直接传递,默认json格式数据</span></span><br><span class="line">axios.post(<span class="string">'url/123'</span>, params)<span class="comment">//传递formData格式数据</span></span><br><span class="line"><span class="comment">//const params=new URLSearchParams()</span></span><br><span class="line"><span class="comment">//params.append('uname',123)</span></span><br><span class="line"><span class="comment">//params.append('pwd',123)</span></span><br></pre></td></tr></table></figure>

<h3 id="axios-响应结果"><a href="#axios-响应结果" class="headerlink" title="axios 响应结果"></a>axios 响应结果</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">data; <span class="comment">//实际响应回来的数据,json格式,可直接使用</span></span><br><span class="line">headers; <span class="comment">//响应头信息</span></span><br><span class="line">status; <span class="comment">//响应状态码</span></span><br><span class="line">statusText; <span class="comment">//响应状态信息</span></span><br><span class="line">config;</span><br><span class="line">request;</span><br><span class="line"></span><br><span class="line">axios.get(<span class="string">'url'</span>).then(<span class="function"><span class="keyword">function</span> (<span class="params">ret</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(ret.data); <span class="comment">//ret.data才是真实数据,data为固定属性名</span></span><br><span class="line">  <span class="built_in">console</span>.log(ret.headers);</span><br><span class="line">  <span class="built_in">console</span>.log(ret.status);</span><br><span class="line">  <span class="built_in">console</span>.log(ret.statusText);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="axios-全局配置"><a href="#axios-全局配置" class="headerlink" title="axios 全局配置"></a>axios 全局配置</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">axios.defaults.headers[<span class="string">'mytoken'</span>] = <span class="string">'hello123'</span>; <span class="comment">//配置请求头</span></span><br><span class="line"><span class="comment">//axios.defaults.headers=&#123;...&#125;,这样写会覆盖原有的对象</span></span><br><span class="line">axios.defaults.timeout = <span class="number">3000</span>; <span class="comment">//配置超时时间</span></span><br><span class="line">axios.defaults.baseURL = <span class="string">'http://localhost:3000/app'</span>; <span class="comment">//配置基准url路径</span></span><br></pre></td></tr></table></figure>

<h3 id="axios-拦截器"><a href="#axios-拦截器" class="headerlink" title="axios 拦截器***"></a>axios 拦截器***</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>请求拦截器(request,config)</span><br><span class="line">axios.interceptors.request.use(<span class="function"><span class="keyword">function</span>(<span class="params">config</span>)</span>&#123;</span><br><span class="line">	config.headers.mytoken=<span class="string">'hello123'</span><span class="comment">//在这里处理发送数据</span></span><br><span class="line">	<span class="keyword">return</span> config<span class="comment">//放行</span></span><br><span class="line">&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(err)<span class="comment">//在这里处理错误信息</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>响应拦截器(response,response)</span><br><span class="line">axios.interceptors.response.use(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> data=response.data<span class="comment">//在这里处理发送数据</span></span><br><span class="line">	<span class="keyword">return</span> data<span class="comment">//放行</span></span><br><span class="line">&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(err)<span class="comment">//在这里处理错误信息</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="async-await"><a href="#async-await" class="headerlink" title="async/await"></a>async/await</h2><h3 id="async-await-基本用法"><a href="#async-await-基本用法" class="headerlink" title="async/await 基本用法"></a>async/await 基本用法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>简介(异步/等待)</span><br><span class="line"><span class="keyword">async</span>/awat是ES7引入的新语法,可以更加方便的进行异步操作</span><br><span class="line"><span class="keyword">async</span>关键字用于函数上( <span class="keyword">async</span>函数的返回值是 <span class="built_in">Promise</span>实例对象)</span><br><span class="line"><span class="keyword">await</span>关键字用于 <span class="keyword">async</span>函数当中( <span class="keyword">await</span>可以得到异步的结果)</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>用法</span><br><span class="line"><span class="comment">//使用async前缀声明一个函数</span></span><br><span class="line">  axios.defaults.baseURL = <span class="string">'http://localhost:3000/'</span></span><br><span class="line">  <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">queryData</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> res1 = <span class="keyword">await</span> axios.get(<span class="string">'async1'</span>)</span><br><span class="line">    <span class="keyword">const</span> res2 = <span class="keyword">await</span> axios.get(<span class="string">'async2'</span>, &#123;</span><br><span class="line">      params: &#123; <span class="attr">info</span>: res.data &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> [res1, res2]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  queryData().then(<span class="function"><span class="params">ret</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(ret,)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>

<h2 id="基于接口的案例"><a href="#基于接口的案例" class="headerlink" title="基于接口的案例"></a>基于接口的案例</h2>]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/07/11/hello-world/</url>
    <content><![CDATA[<p>测试文档</p>
<h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><h3 id="子标题"><a href="#子标题" class="headerlink" title="子标题"></a>子标题</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">var str = <span class="string">"hello world"</span></span><br></pre></td></tr></table></figure>

<a id="more"></a>

<p>123123123</p>
<p>123213</p>
<p>123123</p>
<p><img src="/img/1604136879647.png" alt="1604136879647"></p>
]]></content>
  </entry>
  <entry>
    <title>如何使用hexo创建一个博客</title>
    <url>/2020/11/08/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8hexo%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<a id="more"></a>

<p>#hexo</p>
<h2 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h2><h3 id="环境依赖"><a href="#环境依赖" class="headerlink" title="环境依赖"></a>环境依赖</h3><p><strong>node.js</strong>，<strong>hexo</strong>，<strong>gitbash</strong></p>
<h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h3><p>1、首先要在github创建一个仓库，仓库名为：</p>
<p>你的git用户名<strong>.github.io</strong></p>
<p>2、在本地磁盘创建一个存放项目的文件夹，并且与git仓库同步</p>
<p>3、安装hexo</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<p>4、安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo init &lt;你的项目文件夹&gt;</span><br><span class="line">$ cd &lt;你的项目文件夹&gt;</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure>

<p><strong>or</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在你的项目文件夹shift+右键打开powershell</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure>

<p>5、文件夹介绍：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml		&#x2F;&#x2F; hexo的配置文件</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source			&#x2F;&#x2F; 生成分类的目录</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts		&#x2F;&#x2F; 默认生成文章的文件夹</span><br><span class="line">└── themes     		&#x2F;&#x2F; 存放主题的文件夹</span><br></pre></td></tr></table></figure>

<h3 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h3><p><strong>以nexT举例</strong></p>
<h4 id="1、下载主题"><a href="#1、下载主题" class="headerlink" title="1、下载主题"></a>1、下载主题</h4><p>在你的hexo项目根目录打开powershell，克隆next的仓库到themes下的next文件夹（没有找到的话会自动生成）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;iissnan&#x2F;hexo-theme-next themes&#x2F;next</span><br></pre></td></tr></table></figure>

<p>####2、启用主题</p>
<p>在hexo根目录下找到<strong>_config.yml</strong>文件，找到里面<strong>theme</strong>字段，设置为 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure>

<h4 id="3、验证主题是否安装成功并使用"><a href="#3、验证主题是否安装成功并使用" class="headerlink" title="3、验证主题是否安装成功并使用"></a>3、验证主题是否安装成功并使用</h4><p>首先启动 Hexo 本地站点，并开启调试模式（即加上 <code>--debug</code>），整个命令是 <code>hexo s --debug</code>。 在服务启动的过程，注意观察命令行输出是否有任何异常信息，如果你碰到问题，这些信息将帮助他人更好的定位错误。 当命令行输出中提示出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INFO  Hexo is running at http:&#x2F;&#x2F;0.0.0.0:4000&#x2F;. Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure>

<p>此时即可使用浏览器访问 <code>http://localhost:4000</code>，检查站点是否正确运行。</p>
<h3 id="设置主题"><a href="#设置主题" class="headerlink" title="设置主题"></a>设置主题</h3><h4 id="1、选择Scheme"><a href="#1、选择Scheme" class="headerlink" title="1、选择Scheme"></a>1、选择Scheme</h4><p>Scheme 是 NexT 提供的一种特性，借助于 Scheme，NexT 为你提供多种不同的外观。同时，几乎所有的配置都可以 在 Scheme 之间共用。目前 NexT 支持三种 Scheme，他们是：</p>
<ul>
<li>Muse - 默认 Scheme，这是 NexT 最初的版本，黑白主调，大量留白</li>
<li>Mist - Muse 的紧凑版本，整洁有序的单栏外观</li>
<li>Pisces - 双栏 Scheme，小家碧玉似的清新</li>
</ul>
<p>Scheme 的切换通过更改 主题配置文件，搜索 scheme 关键字。 你会看到有三行 scheme 的配置，将你需用启用的 scheme 前面注释 <code>#</code> 去除即可。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#scheme: Muse</span><br><span class="line">#scheme: Mist</span><br><span class="line">scheme: Pisces</span><br></pre></td></tr></table></figure>

<h4 id="2、设置语言"><a href="#2、设置语言" class="headerlink" title="2、设置语言"></a>2、设置语言</h4><p>打开<strong>hexo</strong>根目录的<strong>_config.yml</strong>，找到<code>language</code>字段，设置为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">language: zh-Hans</span><br></pre></td></tr></table></figure>

<p><strong>注意：如果这样设置之后你的hexo无效，请检查<code>themes/next/languages</code>中是否有<code>zh-CN.yml</code>，将<code>zh-CN.yml</code>改为<code>zh-Hans.yml</code>，后缀不变</strong></p>
<p>####3、设置菜单</p>
<p>菜单配置包括三个部分，第一是菜单项（名称和链接），第二是菜单项的显示文本，第三是菜单项对应的图标。 NexT 使用的是 <a href="http://fontawesome.io/" target="_blank" rel="noopener">Font Awesome</a> 提供的图标， Font Awesome 提供了 600+ 的图标，可以满足绝大的多数的场景，同时无须担心在 Retina 屏幕下 图标模糊的问题。</p>
<p>编辑 主题配置文件，修改以下内容：</p>
<ol>
<li><p>设定菜单内容，对应的字段是 <code>menu</code>。 菜单内容的设置格式是：<code>item name: link</code>。其中 <code>item name</code>是一个名称，这个名称并不直接显示在页面上，她将用于匹配图标以及翻译。</p>
<p>菜单示例配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: &#x2F;</span><br><span class="line">  archives: &#x2F;archives</span><br><span class="line">  #about: &#x2F;about</span><br><span class="line">  #categories: &#x2F;categories</span><br><span class="line">  tags: &#x2F;tags</span><br><span class="line">  #commonweal: &#x2F;404.html</span><br></pre></td></tr></table></figure>

<p>若你的站点运行在子目录中，请将链接前缀的 <code>/</code> 去掉</p>
<p>NexT 默认的菜单项有（标注 ** 的项表示需要手动创建这个页面）：</p>
<table>
<thead>
<tr>
<th>键值</th>
<th>设定值</th>
<th>显示文本（简体中文）</th>
</tr>
</thead>
<tbody><tr>
<td>home</td>
<td><code>home: /</code></td>
<td>主页</td>
</tr>
<tr>
<td>archives</td>
<td><code>archives: /archives</code></td>
<td>归档页</td>
</tr>
<tr>
<td>categories</td>
<td><code>categories: /categories</code></td>
<td>分类页 **</td>
</tr>
<tr>
<td>tags</td>
<td><code>tags: /tags</code></td>
<td>标签页 **</td>
</tr>
<tr>
<td>about</td>
<td><code>about: /about</code></td>
<td>关于页面 **</td>
</tr>
<tr>
<td>commonweal</td>
<td><code>commonweal: /404.html</code></td>
<td>公益 404 **</td>
</tr>
</tbody></table>
</li>
<li><p>设置菜单项的显示文本。在第一步中设置的菜单的名称并不直接用于界面上的展示。Hexo 在生成的时候将使用 这个名称查找对应的语言翻译，并提取显示文本。这些翻译文本放置在 NexT 主题目录下的 <code>languages/{language}.yml</code> （<code>{language}</code> 为你所使用的语言）。</p>
<p>以简体中文为例，若你需要添加一个菜单项，比如 <code>something</code>。那么就需要修改简体中文对应的翻译文件 <code>languages/zh-Hans.yml</code>，在 <code>menu</code> 字段下添加一项：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: 首页</span><br><span class="line">  archives: 归档</span><br><span class="line">  categories: 分类</span><br><span class="line">  tags: 标签</span><br><span class="line">  about: 关于</span><br><span class="line">  search: 搜索</span><br><span class="line">  commonweal: 公益404</span><br><span class="line">  something: 有料</span><br></pre></td></tr></table></figure>
</li>
<li><p>设定菜单项的图标，对应的字段是 <code>menu_icons</code>。 此设定格式是 <code>item name: icon name</code>，其中 <code>item name</code> 与上一步所配置的菜单名字对应，<code>icon name</code> 是 Font Awesome 图标的 名字。而 <code>enable</code> 可用于控制是否显示图标，你可以设置成 <code>false</code> 来去掉图标。</p>
<p>菜单图标配置示例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">menu_icons:</span><br><span class="line">  enable: true</span><br><span class="line">  # Icon Mapping.</span><br><span class="line">  home: home</span><br><span class="line">  about: user</span><br><span class="line">  categories: th</span><br><span class="line">  tags: tags</span><br><span class="line">  archives: archive</span><br><span class="line">  commonweal: heartbeat</span><br></pre></td></tr></table></figure>

<p>在菜单图标开启的情况下，如果菜单项与菜单未匹配（没有设置或者无效的 Font Awesome 图标名字） 的情况下，NexT 将会使用 ** 作为图标。</p>
<p>请注意键值（如 <code>home</code>）的大小写要严格匹配</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    路径 || 字体图标</span><br><span class="line">home: &#x2F; || fa fa-home</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>####4、设置侧栏</p>
<p>默认情况下，侧栏仅在文章页面（拥有目录列表）时才显示，并放置于右侧位置。 可以通过修改 主题配置文件 中的 <code>sidebar</code> 字段来控制侧栏的行为。侧栏的设置包括两个部分，其一是侧栏的位置， 其二是侧栏显示的时机。</p>
<ol>
<li><p>设置侧栏的位置，修改 <code>sidebar.position</code> 的值，支持的选项有：</p>
<ul>
<li>left - 靠左放置</li>
<li>right - 靠右放置</li>
</ul>
<p>目前仅 Pisces Scheme 支持 <code>position</code> 配置。影响版本5.0.0及更低版本。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sidebar:</span><br><span class="line">  position: left</span><br></pre></td></tr></table></figure>
</li>
<li><p>设置侧栏显示的时机，修改 <code>sidebar.display</code> 的值，支持的选项有：</p>
<ul>
<li><code>post</code> - 默认行为，在文章页面（拥有目录列表）时显示</li>
<li><code>always</code> - 在所有页面中都显示</li>
<li><code>hide</code> - 在所有页面中都隐藏（可以手动展开）</li>
<li><code>remove</code> - 完全移除</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sidebar:</span><br><span class="line">  display: post</span><br></pre></td></tr></table></figure>

<p>已知侧栏在 <code>use motion: false</code> 的情况下不会展示。 影响版本5.0.0及更低版本。</p>
</li>
</ol>
<p>####5、设置头像</p>
<p>编辑 主题配置文件， 修改字段 <code>avatar</code>， 值设置成头像的链接地址。其中，头像的链接地址可以是：</p>
<table>
<thead>
<tr>
<th>地址</th>
<th>值</th>
</tr>
</thead>
<tbody><tr>
<td>完整的互联网 URI</td>
<td><code>http://example.com/avatar.png</code></td>
</tr>
<tr>
<td>站点内的地址</td>
<td>将头像放置主题目录下的 <code>source/uploads/</code> （新建 uploads 目录若不存在）配置为：<code>avatar: /uploads/avatar.png</code>或者 放置在 <code>source/images/</code> 目录下配置为：<code>avatar: /images/avatar.png</code></td>
</tr>
</tbody></table>
<p>头像设置示例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">avatar: http:&#x2F;&#x2F;example.com&#x2F;avatar.png</span><br></pre></td></tr></table></figure>

<h2 id="二、创建文章"><a href="#二、创建文章" class="headerlink" title="二、创建文章"></a>二、创建文章</h2>]]></content>
  </entry>
</search>
